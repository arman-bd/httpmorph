[build-system]
requires = ["setuptools>=68.0", "wheel", "Cython>=3.0"]
build-backend = "setuptools.build_meta"

[project]
name = "httpmorph"
version = "0.1.2"
description = "A Python HTTP client focused on mimicking browser fingerprints."
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Arman Hossain", email = "arman@bytetunnels.com"}
]
keywords = ["http", "https", "client", "performance", "anti-fingerprint", "tls", "ja3", "http2"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: 3.14",
    "Programming Language :: C",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = []

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-asyncio>=0.21.0",
    "pytest-benchmark>=4.0",
    "pytest-cov>=4.0",
    "cryptography>=41.0",  # For test HTTPS server
    "filelock>=3.12.0",  # For test fixtures
    "mypy>=1.0",
    "ruff>=0.7.0",
]
build = [
    "setuptools>=68.0",
    "wheel",
    "Cython>=3.0",
]

[project.urls]
Homepage = "https://github.com/arman-bd/httpmorph"
Documentation = "https://github.com/arman-bd/httpmorph/blob/main/README.md"
Repository = "https://github.com/arman-bd/httpmorph"
Issues = "https://github.com/arman-bd/httpmorph/issues"

[tool.setuptools]
packages = ["httpmorph"]
package-dir = {"" = "src"}
# Don't automatically include LICENSE file (causes PyPI upload issues)
license-files = []

[tool.setuptools.package-data]
httpmorph = ["*.pyx", "*.pxd", "*.c", "*.h"]

[tool.ruff]
line-length = 100
target-version = "py38"
fix = true

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by formatter)
    "B008",  # function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "benchmark: marks tests as benchmarks",
    "fingerprint: marks tests that check fingerprinting",
    "integration: marks tests that require network access",
    "ssl: marks tests that require SSL support",
]

[tool.cibuildwheel]
build = "cp38-* cp39-* cp310-* cp311-* cp312-* cp313-* cp314-*"
skip = "*-musllinux_* *-win32"
build-verbosity = 1

[tool.cibuildwheel.linux]
before-all = [
    "sed -i 's/mirrorlist/#mirrorlist/g' /etc/yum.repos.d/CentOS-* || true",
    "sed -i 's|#baseurl=http://mirror.centos.org|baseurl=http://vault.centos.org|g' /etc/yum.repos.d/CentOS-* || true",
    "yum install -y cmake openssl-devel zlib-devel pkgconfig autoconf automake libtool golang || yum install -y openssl-devel zlib-devel pkgconfig autoconf automake libtool golang",
]
before-build = "bash scripts/setup_vendors.sh"

[tool.cibuildwheel.macos]
before-all = [
    "brew install cmake ninja go",
]
before-build = "bash scripts/setup_vendors.sh"
repair-wheel-command = "delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel} --ignore-missing-dependencies"

[tool.cibuildwheel.windows]
before-all = [
    "choco install cmake ninja golang -y",
]
before-build = [
    "bash scripts/setup_vendors.sh",
]
environment = { VCPKG_ROOT = "C:/vcpkg" }
