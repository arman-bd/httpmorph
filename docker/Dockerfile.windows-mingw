# Windows Cross-Compilation Test using MinGW-w64
# Tests Windows API compatibility and compilation on Linux/macOS
#
# This simulates Windows builds by:
# 1. Using MinGW-w64 cross-compiler (x86_64-w64-mingw32-gcc)
# 2. Testing all Windows-specific code paths
# 3. Validating Windows API usage (Winsock2, Windows.h, etc.)

FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Install MinGW-w64 and build tools
RUN apt-get update && apt-get install -y \
    gcc-mingw-w64-x86-64 \
    g++-mingw-w64-x86-64 \
    mingw-w64-tools \
    cmake \
    ninja-build \
    git \
    curl \
    wget \
    zip \
    unzip \
    tar \
    python3.11 \
    python3.11-dev \
    python3-pip \
    pkg-config \
    autoconf \
    automake \
    libtool \
    make \
    && rm -rf /var/lib/apt/lists/*

# Set Python 3.11 as default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.11 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1

# Upgrade pip and install build tools
RUN python3 -m pip install --upgrade pip setuptools wheel cython pytest

# Install vcpkg for Windows dependencies (with retry logic for network issues)
ENV VCPKG_ROOT=/opt/vcpkg
RUN git clone --depth 1 --single-branch https://github.com/microsoft/vcpkg.git ${VCPKG_ROOT} || \
    (sleep 5 && git clone --depth 1 --single-branch https://github.com/microsoft/vcpkg.git ${VCPKG_ROOT}) || \
    (sleep 10 && git clone --depth 1 --single-branch https://github.com/microsoft/vcpkg.git ${VCPKG_ROOT})
RUN cd ${VCPKG_ROOT} && ./bootstrap-vcpkg.sh

# Install Windows dependencies using vcpkg with x64-mingw-static triplet
RUN ${VCPKG_ROOT}/vcpkg install \
    openssl:x64-mingw-static \
    nghttp2:x64-mingw-static \
    zlib:x64-mingw-static \
    --clean-after-build

# Set environment for MinGW cross-compilation
ENV VCPKG_DEFAULT_TRIPLET=x64-mingw-static
ENV MINGW_PREFIX=/usr/x86_64-w64-mingw32
ENV CC=x86_64-w64-mingw32-gcc
ENV CXX=x86_64-w64-mingw32-g++
ENV AR=x86_64-w64-mingw32-ar
ENV RANLIB=x86_64-w64-mingw32-ranlib
ENV PKG_CONFIG_PATH=${VCPKG_ROOT}/installed/x64-mingw-static/lib/pkgconfig

WORKDIR /workspace

# Copy project files
COPY . .

# Create test script
RUN cat > /usr/local/bin/test-windows-build << 'EOF'
#!/bin/bash
set -e

echo "╔════════════════════════════════════════════════════════════════╗"
echo "║        Windows Build Test (MinGW-w64 Cross-Compiler)          ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""

# Test 1: Check if Windows headers are properly guarded
echo "📋 Test 1: Checking Windows-specific code guards..."
if grep -r "#ifdef _WIN32" src/core/*.c | grep -q .; then
    echo "   ✅ Found Windows-specific guards"
else
    echo "   ⚠️  No Windows guards found"
fi

# Test 2: Compile check for Windows-specific files
echo ""
echo "📋 Test 2: Testing Windows API compatibility..."
cat > /tmp/test_windows.c << 'CTEST'
#define _WIN32 1
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>
#include <stdio.h>

int main() {
    WSADATA wsaData;
    if (WSAStartup(MAKEWORD(2, 2), &wsaData) != 0) {
        return 1;
    }

    SOCKET sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == INVALID_SOCKET) {
        WSACleanup();
        return 1;
    }

    closesocket(sock);
    WSACleanup();

    printf("Windows API test passed!\n");
    return 0;
}
CTEST

if x86_64-w64-mingw32-gcc /tmp/test_windows.c -o /tmp/test_windows.exe -lws2_32 2>/dev/null; then
    echo "   ✅ Windows API headers compile successfully"
else
    echo "   ❌ Windows API compilation failed"
    exit 1
fi

# Test 3: Syntax check of source files with Windows defines
echo ""
echo "📋 Test 3: Syntax checking httpmorph.c with Windows defines..."
x86_64-w64-mingw32-gcc -D_WIN32 -fsyntax-only \
    -I${VCPKG_ROOT}/installed/x64-mingw-static/include \
    -Iinclude -Isrc/core -Isrc/tls \
    src/core/httpmorph.c \
    -Wno-deprecated-declarations 2>&1 | head -20

if [ ${PIPESTATUS[0]} -eq 0 ]; then
    echo "   ✅ httpmorph.c syntax check passed"
else
    echo "   ⚠️  Syntax warnings found (check above)"
fi

# Test 4: Check for Windows-incompatible functions
echo ""
echo "📋 Test 4: Checking for Windows-incompatible code..."
INCOMPATIBLE_FOUND=0

if grep -r "fork\|execve\|pipe2\|epoll\|kqueue" src/core/*.c | grep -v "ifdef" | grep -v "//"; then
    echo "   ⚠️  Found potentially incompatible functions (check if properly guarded)"
    INCOMPATIBLE_FOUND=1
else
    echo "   ✅ No unguarded incompatible functions"
fi

# Test 5: Verify all Windows-specific replacements
echo ""
echo "📋 Test 5: Verifying Windows API replacements..."
MISSING=0

for file in src/core/*.c; do
    if grep -q "_WIN32" "$file"; then
        # Check for required Windows headers
        if ! grep -q "winsock2.h" "$file"; then
            echo "   ⚠️  $file: Missing winsock2.h"
            MISSING=1
        fi

        # Check for WSAStartup if using sockets
        if grep -q "socket(" "$file" && ! grep -q "WSAStartup\|Already initialized" "$file" 2>/dev/null; then
            echo "   ℹ️  $file: Check if WSAStartup is called"
        fi
    fi
done

if [ $MISSING -eq 0 ]; then
    echo "   ✅ All Windows headers present"
fi

# Test 6: Check for proper printf format specifiers
echo ""
echo "📋 Test 6: Checking printf format specifiers..."
if grep -r "%lu.*uint64_t\|%ld.*uint64_t" src/core/*.c | grep -v "PRIu64\|PRId64"; then
    echo "   ⚠️  Found potentially incorrect format specifiers for uint64_t"
    echo "      Use PRIu64 from <inttypes.h> for portability"
else
    echo "   ✅ Printf format specifiers look correct"
fi

# Summary
echo ""
echo "╔════════════════════════════════════════════════════════════════╗"
echo "║                     Test Summary                               ║"
echo "╚════════════════════════════════════════════════════════════════╝"
echo ""
if [ $INCOMPATIBLE_FOUND -eq 0 ] && [ $MISSING -eq 0 ]; then
    echo "✅ All Windows compatibility checks passed!"
    echo ""
    echo "Note: This tests API compatibility using MinGW cross-compiler."
    echo "For full MSVC testing, use GitHub Actions Windows runner."
    exit 0
else
    echo "⚠️  Some warnings found. Review the output above."
    exit 0
fi
EOF

RUN chmod +x /usr/local/bin/test-windows-build

# Default command
CMD ["test-windows-build"]
