# Quick Windows API Compatibility Test
# Lightweight Docker image for fast Windows compatibility checks
# Does not build the full project - just tests syntax and API usage

FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Install minimal tools
RUN apt-get update && apt-get install -y \
    gcc-mingw-w64-x86-64 \
    make \
    grep \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /workspace

# Copy only source files
COPY src/ ./src/
COPY include/ ./include/

# Quick test script
RUN cat > /usr/local/bin/quick-test << 'EOF'
#!/bin/bash
set -e

echo "╔══════════════════════════════════════════════════════════╗"
echo "║   Quick Windows API Compatibility Check (30 seconds)    ║"
echo "╚══════════════════════════════════════════════════════════╝"
echo ""

ERRORS=0

# Test 1: Check for Windows-specific guards
echo "✓ Checking #ifdef _WIN32 guards..."
if ! grep -r "_WIN32" src/core/*.c >/dev/null; then
    echo "  ⚠️  No Windows guards found"
    ERRORS=$((ERRORS + 1))
fi

# Test 2: Check for proper header includes
echo "✓ Checking Windows headers..."
for file in src/core/*.c; do
    if grep -q "_WIN32" "$file"; then
        if ! grep -q "winsock2.h" "$file"; then
            echo "  ❌ $file: Missing winsock2.h"
            ERRORS=$((ERRORS + 1))
        fi
    fi
done

# Test 3: Check for POSIX functions that need Windows alternatives
echo "✓ Checking for unguarded POSIX functions..."
POSIX_FUNCS="fcntl|clock_gettime|strcasecmp|strdup|strndup"
for file in src/core/*.c; do
    # Look for these functions outside of #else blocks
    if grep -E "($POSIX_FUNCS)\s*\(" "$file" | grep -v "define\|ifdef\|ifndef\|endif"; then
        if ! grep -q "_WIN32" "$file"; then
            echo "  ⚠️  $file: POSIX functions without Windows guards"
        fi
    fi
done

# Test 4: Check for correct format specifiers
echo "✓ Checking printf format specifiers..."
if grep -r "printf.*%lu.*uint64" src/core/*.c | grep -v "PRIu64"; then
    echo "  ⚠️  Found incorrect uint64_t format specifiers"
    echo "     Use PRIu64 from <inttypes.h>"
fi

# Test 5: Basic Windows API syntax test
echo "✓ Testing Windows API compilation..."
cat > /tmp/test_win.c << 'CTEST'
#define _WIN32 1
#include <winsock2.h>
#include <ws2tcpip.h>
#include <windows.h>

int main() {
    WSADATA wsa;
    WSAStartup(MAKEWORD(2,2), &wsa);
    SOCKET s = socket(AF_INET, SOCK_STREAM, 0);
    closesocket(s);
    WSACleanup();
    return 0;
}
CTEST

if x86_64-w64-mingw32-gcc /tmp/test_win.c -o /tmp/test.exe -lws2_32 2>&1 | grep -i error; then
    echo "  ❌ Windows API test failed"
    ERRORS=$((ERRORS + 1))
else
    echo "  ✅ Windows API compiles"
fi

# Test 6: Check main source files
echo "✓ Syntax checking httpmorph.c..."
x86_64-w64-mingw32-gcc -D_WIN32 -fsyntax-only \
    -Iinclude -Isrc/core -Isrc/tls \
    -Wno-deprecated-declarations \
    src/core/httpmorph.c 2>&1 | head -10

if [ ${PIPESTATUS[0]} -eq 0 ]; then
    echo "  ✅ httpmorph.c: No syntax errors"
else
    echo "  ⚠️  httpmorph.c: Syntax warnings (see above)"
fi

echo ""
echo "═══════════════════════════════════════════════════════════"
if [ $ERRORS -eq 0 ]; then
    echo "✅ All quick checks passed!"
    echo ""
    echo "For full testing, use: make docker-windows"
    exit 0
else
    echo "⚠️  Found $ERRORS issues"
    echo ""
    echo "Review the output above for details."
    exit 1
fi
EOF

RUN chmod +x /usr/local/bin/quick-test

CMD ["quick-test"]
