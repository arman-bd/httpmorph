name: Release

on:
  push:
    tags: ['v*']

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y cmake ninja-build libssl-dev

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install cmake -y

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup vendor dependencies
      run: |
        chmod +x scripts/setup_vendors.sh
        ./scripts/setup_vendors.sh
      shell: bash

    - name: Install package
      run: pip install -e ".[dev]"

    - name: Lint
      run: ruff check src/ tests/

    - name: Run tests
      run: pytest tests/ -v --cov=httpmorph --cov-report=xml

  build-wheels:
    name: Build Wheels (${{ matrix.os }})
    needs: test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
        CIBW_BUILD: cp39-* cp310-* cp311-* cp312-*
        CIBW_SKIP: "*-musllinux_*"
        CIBW_BEFORE_ALL_LINUX: apt-get update && apt-get install -y cmake ninja-build libssl-dev
        CIBW_BEFORE_ALL_MACOS: brew install cmake ninja

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  publish:
    name: Publish Release
    needs: build-wheels
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Flatten wheels
      run: |
        mkdir -p wheels
        find dist/ -name "*.whl" -exec cp {} wheels/ \;
        ls -lh wheels/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: wheels/*.whl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      if: env.PYPI_API_TOKEN != ''
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        twine upload wheels/*.whl --skip-existing
