name: Release

on:
  push:
    tags: ['v*']

# Configuration - Edit this section
env:
  # Set to 'true' to run tests before building wheels, 'false' to skip tests
  RUN_TESTS: 'false'

  # Test matrix configuration (only used if RUN_TESTS is 'true')
  TEST_OS_MATRIX: '["ubuntu-latest", "macos-latest", "windows-latest"]'
  TEST_PYTHON_MATRIX: '["3.9", "3.10", "3.11", "3.12"]'

jobs:
  test:
    name: Run Tests
    if: env.RUN_TESTS == 'true'
    uses: ./.github/workflows/_test.yml
    with:
      os-matrix: ${{ env.TEST_OS_MATRIX }}
      python-matrix: ${{ env.TEST_PYTHON_MATRIX }}
      primary-os: "ubuntu-latest"
      primary-python: "3.11"
    secrets: inherit

  build-wheels:
    name: Build Wheels (${{ matrix.os }})
    needs: test
    if: always() && (needs.test.result == 'success' || needs.test.result == 'skipped')
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      with:
        package-dir: .
        output-dir: wheelhouse

    - uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl

  publish:
    name: Publish Release
    needs: build-wheels
    runs-on: ubuntu-latest
    environment:
      name: PYPI_RELEASE
      url: https://pypi.org/project/httpmorph/
    permissions:
      contents: write
      id-token: write

    steps:
    - uses: actions/checkout@v4

    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Flatten wheels
      run: |
        mkdir -p wheels
        find dist/ -name "*.whl" -exec cp {} wheels/ \;
        ls -lh wheels/

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: wheels/*.whl
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        pip install twine
        if [ -n "$TWINE_PASSWORD" ]; then
          echo "Publishing to PyPI..."
          twine upload wheels/*.whl --skip-existing --verbose
        else
          echo "⚠️  PYPI_API_TOKEN not set - skipping PyPI upload"
          echo "To publish to PyPI, add PYPI_API_TOKEN to the PYPI_RELEASE environment secrets"
        fi
      shell: bash
