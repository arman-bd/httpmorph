name: Build Linux Wheels

on:
  workflow_call:
    inputs:
      python-versions:
        description: 'Python versions to build for'
        required: false
        type: string
        default: '["3.9", "3.10", "3.11", "3.12"]'

jobs:
  build-linux:
    name: Build Linux Wheels
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    # Setup Go for BoringSSL build
    - name: Setup Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    # Cache vendor dependencies to speed up builds
    # Note: For Linux, vendors are built inside manylinux container, so we cache the vendor directory
    - name: Restore vendor cache
      id: cache-vendor
      uses: actions/cache/restore@v4
      with:
        path: vendor
        key: vendor-linux-manylinux-${{ hashFiles('scripts/linux/setup_vendors.sh') }}-v9
        restore-keys: |
          vendor-linux-manylinux-

    # Build wheels with cibuildwheel (handles manylinux containers)
    # The vendor directory is mounted into the container automatically
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.22.0
      env:
        # Build for specified Python versions
        CIBW_BUILD: cp39-manylinux_x86_64 cp310-manylinux_x86_64 cp311-manylinux_x86_64 cp312-manylinux_x86_64
        # Vendor build happens inside manylinux container via before-build (from pyproject.toml)

    # Save vendor cache after build
    - name: Save vendor cache
      if: steps.cache-vendor.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: vendor
        key: vendor-linux-manylinux-${{ hashFiles('scripts/linux/setup_vendors.sh') }}-v9

    # Test the built wheels
    - name: Test wheels
      run: |
        # Test each wheel that was built
        for wheel in ./wheelhouse/*.whl; do
          echo "========================================"
          echo "Testing wheel: $(basename "$wheel")"
          echo "========================================"

          # Extract Python version from wheel filename (e.g., cp39, cp310)
          python_tag=$(basename "$wheel" | grep -oP 'cp\d+' | head -1)
          python_version="${python_tag:2:1}.${python_tag:3}"

          echo "Setting up Python $python_version..."

          # Use the appropriate Python version
          python_cmd="python${python_version}"
          if ! command -v "$python_cmd" &> /dev/null; then
            python_cmd="python3"
          fi

          # Install the wheel in a fresh environment
          "$python_cmd" -m pip install --force-reinstall "$wheel"

          # Run the test script
          echo ""
          echo "Running tests..."
          "$python_cmd" scripts/test_local_build.py

          # Check exit code
          if [ $? -eq 0 ]; then
            echo ""
            echo "[OK] Wheel test PASSED: $(basename "$wheel")"
          else
            echo ""
            echo "[FAIL] Wheel test FAILED: $(basename "$wheel")"
            exit 1
          fi

          echo ""
        done

        echo "========================================"
        echo "All wheel tests PASSED"
        echo "========================================"

    # Upload wheels as artifacts
    - uses: actions/upload-artifact@v4
      with:
        name: wheels-linux
        path: ./wheelhouse/*.whl
        if-no-files-found: error
