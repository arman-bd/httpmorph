name: Test

on:
  workflow_call:
    inputs:
      os-matrix:
        required: true
        type: string
      python-matrix:
        required: true
        type: string
      primary-os:
        required: true
        type: string
      primary-python:
        required: true
        type: string

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(inputs.os-matrix) }}
        python-version: ${{ fromJSON(inputs.python-matrix) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libssl-dev pkg-config autoconf automake libtool

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja openssl@3 libnghttp2

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install cmake ninja -y

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup ccache (Unix)
      if: runner.os != 'Windows'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ runner.os }}-${{ matrix.python-version }}
        max-size: 500M

    - name: Configure ccache (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "CC=ccache gcc" >> $GITHUB_ENV
        echo "CXX=ccache g++" >> $GITHUB_ENV
      shell: bash

    - name: Setup vcpkg (Windows)
      if: runner.os == 'Windows'
      run: |
        # Use pre-installed vcpkg on GitHub runners
        if [ -d "C:/vcpkg" ]; then
          echo "Using pre-installed vcpkg"
          VCPKG_ROOT="C:/vcpkg"
        else
          echo "Installing vcpkg"
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          cd C:/vcpkg
          ./bootstrap-vcpkg.bat
          VCPKG_ROOT="C:/vcpkg"
        fi
        echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV
        echo "$VCPKG_ROOT" >> $GITHUB_PATH
      shell: bash

    - name: Cache vcpkg packages (Windows)
      if: runner.os == 'Windows'
      uses: actions/cache@v4
      with:
        path: |
          C:/vcpkg/installed
          C:/vcpkg/packages
        key: vcpkg-nghttp2-${{ runner.os }}-v2
        restore-keys: |
          vcpkg-nghttp2-${{ runner.os }}-

    - name: Install dependencies via vcpkg (Windows)
      if: runner.os == 'Windows'
      run: |
        vcpkg install nghttp2:x64-windows zlib:x64-windows --clean-after-build
      shell: bash

    - name: Cache vendor dependencies
      id: cache-vendor
      uses: actions/cache@v4
      with:
        path: vendor
        key: vendor-${{ runner.os }}-${{ hashFiles('scripts/setup_vendors.sh') }}-v4
        restore-keys: |
          vendor-${{ runner.os }}-

    - name: Setup vendor dependencies
      run: |
        chmod +x scripts/setup_vendors.sh
        ./scripts/setup_vendors.sh
      shell: bash

    - name: Cache Python build artifacts
      uses: actions/cache@v4
      with:
        path: |
          build
          *.egg-info
          **/*.so
          **/*.pyd
        key: python-build-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'pyproject.toml', 'src/**/*.c', 'src/**/*.cpp', 'src/**/*.h') }}
        restore-keys: |
          python-build-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install package
      run: pip install -e ".[dev]"

    - name: Lint
      run: ruff check src/ tests/

    - name: Run tests
      run: pytest tests/ -v --cov=httpmorph --cov-report=xml

    - name: Upload coverage
      if: matrix.os == inputs.primary-os && matrix.python-version == inputs.primary-python
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false
