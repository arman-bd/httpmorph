name: Test

on:
  workflow_call:
    inputs:
      os-matrix:
        required: true
        type: string
      python-matrix:
        required: true
        type: string
      primary-os:
        required: true
        type: string
      primary-python:
        required: true
        type: string

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(inputs.os-matrix) }}
        python-version: ${{ fromJSON(inputs.python-matrix) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Cache apt packages (Linux)
      if: runner.os == 'Linux'
      uses: actions/cache@v4
      with:
        path: /var/cache/apt/archives
        key: apt-${{ runner.os }}-${{ hashFiles('.github/workflows/_test.yml') }}
        restore-keys: |
          apt-${{ runner.os }}-

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libssl-dev pkg-config autoconf automake libtool

    - name: Cache Homebrew packages (macOS)
      if: runner.os == 'macOS'
      uses: actions/cache@v4
      with:
        path: |
          ~/Library/Caches/Homebrew
          /usr/local/Cellar
          /usr/local/opt
        key: brew-${{ runner.os }}-${{ hashFiles('.github/workflows/_test.yml') }}
        restore-keys: |
          brew-${{ runner.os }}-

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja openssl@3 libnghttp2

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        # Check if already installed
        if ! command -v cmake &> /dev/null; then
          choco install cmake -y
        else
          echo "cmake already installed"
        fi
        if ! command -v ninja &> /dev/null; then
          choco install ninja -y
        else
          echo "ninja already installed"
        fi
      shell: bash

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Setup Go (for BoringSSL build)
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'
        cache: true

    - name: Setup ccache (Unix)
      if: runner.os != 'Windows'
      uses: hendrikmuhs/ccache-action@v1.2
      with:
        key: ccache-${{ runner.os }}-${{ matrix.python-version }}
        max-size: 500M

    - name: Configure ccache (Unix)
      if: runner.os != 'Windows'
      run: |
        echo "CC=ccache gcc" >> $GITHUB_ENV
        echo "CXX=ccache g++" >> $GITHUB_ENV
      shell: bash

    - name: Restore vcpkg cache (Windows)
      if: runner.os == 'Windows'
      id: cache-vcpkg-restore
      uses: actions/cache/restore@v4
      with:
        path: |
          C:/vcpkg/installed
          C:/vcpkg/packages
        key: vcpkg-nghttp2-zlib-${{ runner.os }}-v3
        restore-keys: |
          vcpkg-nghttp2-zlib-${{ runner.os }}-

    - name: Setup vcpkg (Windows)
      if: runner.os == 'Windows' && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
      run: |
        # Use pre-installed vcpkg on GitHub runners
        if [ -d "C:/vcpkg" ]; then
          echo "Using pre-installed vcpkg"
          VCPKG_ROOT="C:/vcpkg"
        else
          echo "Installing vcpkg"
          git clone https://github.com/microsoft/vcpkg.git C:/vcpkg
          cd C:/vcpkg
          ./bootstrap-vcpkg.bat
          VCPKG_ROOT="C:/vcpkg"
        fi
        echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV
        echo "$VCPKG_ROOT" >> $GITHUB_PATH
      shell: bash

    - name: Install dependencies via vcpkg (Windows)
      if: runner.os == 'Windows' && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
      run: |
        export VCPKG_ROOT="C:/vcpkg"
        export PATH="$VCPKG_ROOT:$PATH"
        vcpkg install nghttp2:x64-windows zlib:x64-windows --clean-after-build
      shell: bash

    - name: Set vcpkg environment (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "VCPKG_ROOT=C:/vcpkg" >> $GITHUB_ENV
        echo "C:/vcpkg" >> $GITHUB_PATH
      shell: bash

    - name: Restore vendor cache
      id: cache-vendor
      uses: actions/cache/restore@v4
      with:
        path: vendor
        key: vendor-${{ runner.os }}-${{ hashFiles('scripts/setup_vendors.sh') }}-v7
        restore-keys: |
          vendor-${{ runner.os }}-

    - name: Setup vendor dependencies
      if: steps.cache-vendor.outputs.cache-hit != 'true'
      run: |
        chmod +x scripts/setup_vendors.sh
        ./scripts/setup_vendors.sh
      shell: bash

    - name: Verify vendor directory for caching
      run: |
        echo "Checking vendor directory contents..."
        ls -lah vendor/ || echo "vendor directory not found"
        du -sh vendor/ 2>/dev/null || echo "Cannot get vendor size"
      shell: bash

    - name: Restore Python build cache
      id: cache-python-build
      uses: actions/cache/restore@v4
      with:
        path: |
          build/
          *.egg-info/
        key: python-build-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'pyproject.toml', 'src/**/*.c', 'src/**/*.cpp', 'src/**/*.h') }}
        restore-keys: |
          python-build-${{ runner.os }}-${{ matrix.python-version }}-

    - name: Install package
      run: pip install -e ".[dev]"

    - name: Add DLL paths to PATH (Windows)
      if: runner.os == 'Windows'
      run: |
        echo "Adding BoringSSL and vcpkg DLL paths to PATH..."
        echo "${{ github.workspace }}/vendor/boringssl/build/Release" >> $GITHUB_PATH
        echo "C:/vcpkg/installed/x64-windows/bin" >> $GITHUB_PATH
      shell: bash

    - name: Verify C extension was built
      run: |
        echo "Checking for built C extensions..."
        find . -name "*.pyd" -o -name "*.so" 2>/dev/null || echo "No extensions found"
        ls -R build/ 2>/dev/null || echo "No build directory"
        echo "Checking DLL dependencies..."
        python -c "import sys; print('Python path:', sys.path)"
        python -c "
try:
    import httpmorph._httpmorph
    print('SUCCESS: C extension loaded')
except Exception as e:
    print(f'FAILED: {type(e).__name__}: {e}')
    import traceback
    traceback.print_exc()
"
      shell: bash

    - name: Lint
      run: ruff check src/ tests/

    - name: Run tests
      run: pytest tests/ -v --cov=httpmorph --cov-report=xml

    - name: Upload coverage
      if: matrix.os == inputs.primary-os && matrix.python-version == inputs.primary-python
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

    # Save caches even if tests fail (using always())
    - name: Save vcpkg cache (Windows)
      if: always() && runner.os == 'Windows' && steps.cache-vcpkg-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: |
          C:/vcpkg/installed
          C:/vcpkg/packages
        key: vcpkg-nghttp2-zlib-${{ runner.os }}-v3

    - name: Save vendor cache
      if: always() && steps.cache-vendor.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        path: vendor
        key: vendor-${{ runner.os }}-${{ hashFiles('scripts/setup_vendors.sh') }}-v7

    - name: Save Python build cache
      if: always()
      uses: actions/cache/save@v4
      with:
        path: |
          build/
          *.egg-info/
        key: python-build-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('setup.py', 'pyproject.toml', 'src/**/*.c', 'src/**/*.cpp', 'src/**/*.h') }}
