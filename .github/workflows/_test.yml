name: Test

on:
  workflow_call:
    inputs:
      os-matrix:
        required: true
        type: string
      python-matrix:
        required: true
        type: string
      primary-os:
        required: true
        type: string
      primary-python:
        required: true
        type: string

jobs:
  test:
    name: Test (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: ${{ fromJSON(inputs.os-matrix) }}
        python-version: ${{ fromJSON(inputs.python-matrix) }}

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build libssl-dev pkg-config autoconf automake libtool

    - name: Install system dependencies (macOS)
      if: runner.os == 'macOS'
      run: brew install cmake ninja openssl@3 libnghttp2

    - name: Install system dependencies (Windows)
      if: runner.os == 'Windows'
      run: choco install cmake -y

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: microsoft/setup-msbuild@v2

    - name: Cache vendor dependencies
      id: cache-vendor
      uses: actions/cache@v4
      with:
        path: |
          vendor/boringssl/build
          vendor/liburing/install
          vendor/liburing/src
          vendor/nghttp2/install
          vendor/nghttp2/lib/.libs
        key: vendor-${{ runner.os }}-${{ hashFiles('scripts/setup_vendors.sh') }}-v2
        restore-keys: |
          vendor-${{ runner.os }}-${{ hashFiles('scripts/setup_vendors.sh') }}-
          vendor-${{ runner.os }}-

    - name: Setup vendor dependencies
      run: |
        chmod +x scripts/setup_vendors.sh
        ./scripts/setup_vendors.sh
      shell: bash

    - name: Install package
      run: pip install -e ".[dev]"

    - name: Lint
      run: ruff check src/ tests/

    - name: Run tests
      run: pytest tests/ -v --cov=httpmorph --cov-report=xml

    - name: Upload coverage
      if: matrix.os == inputs.primary-os && matrix.python-version == inputs.primary-python
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
